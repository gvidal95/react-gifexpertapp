{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"6MA8BeA,EA3BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACDC,mBAAS,IADR,mBAC9BC,EAD8B,KAClBC,EADkB,KAWrC,OACI,0BAAMC,SANW,SAACC,GACpBA,EAAEC,iBACFJ,EAAWK,OAAOC,OAAS,GAAKR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,SAKjE,2BACIC,KAAK,OACLC,YAAY,oBACZC,MAAOV,EACPW,SAfc,SAACR,GACvBF,EAAcE,EAAES,OAAOF,YCJlBG,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAChC,OACI,yBAAKC,UAAY,0CACb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCNHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAUF,GAD9C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QATvB,kBAaXY,GAbW,4CAAH,sDCKPM,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EACZrB,mBAAS,CAC/B2B,KAAM,GACNQ,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAuBtC,OAhBAC,qBAAU,WAGNlB,EAAQC,GACHkB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLV,KAAMa,EACNL,SAAS,MAEd,UAIZ,CAACd,IAEGe,EDnByBM,CAAarB,GAAhCW,EAFsB,EAE5BL,KAAcQ,EAFc,EAEdA,QAErB,OACI,oCACI,wBAAIlB,UAAU,qCAAqCI,GACjDc,GAAW,uBAAGlB,UAAU,oCAAb,WAEb,yBAAKA,UAAU,aACVe,EAAOH,KAAI,SAAAC,GAAG,OACX,kBAAC,EAAD,iBACQA,EADR,CAEIa,IAAKb,EAAIC,YEoBlBa,EAjCM,SAAAC,GAAU,IAAD,EACU7C,mBAAS,CAAC,cADpB,mBACnB8C,EADmB,KACP/C,EADO,KAU1B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQ+C,EAAWjB,KAAK,SAAAR,GAAQ,OACrB,kBAAC,EAAD,CACKsB,IAAKtB,EACLA,SAAUA,UCnBtC0B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.6e46a65c.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      inputValue.trim().length > 2 && setCategories(cats => [ inputValue, ...cats]);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\" \r\n                placeholder=\"Ingrese categoria\"\r\n                value={inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className = \"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=YQTzdz9IT3ldHbTlHxxdmOXwcVhOJOJW`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n   \r\n    return (gifs);\r\n}","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>  \r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n        \r\n            <div className=\"card-grid\">\r\n                {images.map(img => \r\n                    <GifGridItem \r\n                        {...img}\r\n                        key={img.id}\r\n                    />\r\n                )}    \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n \r\n    useEffect(()=>{\r\n        //Se ejecuta cuando el componente es renderizado por primera vez, no vuelve a ejecturse con cualquier \r\n        //cambio en react\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setTimeout(() => {\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                }, 3000);\r\n               \r\n            }); \r\n        \r\n    }, [category]); //Si la categoria cambia se dispara el useeffect\r\n\r\n    return state; // {data : [], loading: true }\r\n}","import React, {useState} from 'react'\r\n// import PropTypes from 'prop-types'\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = props => {\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    // const handleAdd = () =>{\r\n    //     // const categoriesAux = categories.concat('spiderman');\r\n    //     // setCategories(categoriesAux);\r\n    //     // setCategories([...categories, 'HusterXHunter']);\r\n    //     setCategories(cats => [...cats, 'HunterXHunter']); //El argumento cats es el valor del estado anterior\r\n    // };\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => \r\n                       <GifGrid\r\n                            key={category} \r\n                            category={category}/>\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n// GifExpertApp.propTypes = {\r\n\r\n// }\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}